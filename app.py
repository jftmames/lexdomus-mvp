# app.py

import streamlit as st
import os
from openai import OpenAI

# Configurar clave API
os.environ["OPENAI_API_KEY"] = os.getenv("OPENAI_API_KEY")
client = OpenAI()

# Configurar dise√±o
st.set_page_config(page_title="LexDomus MVP", layout="centered")

# T√≠tulo
st.title("‚öñÔ∏è LexDomus ‚Äì Asistente Jur√≠dico Deliberativo")
st.markdown("Una aplicaci√≥n basada en IA explicativa para analizar cl√°usulas contractuales en propiedad intelectual.")

st.markdown("---")

# M√≥dulo 1: Entrada de cl√°usula
st.header("üîç 1. Introducci√≥n de la cl√°usula")
st.caption("Introduce una cl√°usula contractual real para su an√°lisis.")
st.info("üí° Esta cl√°usula ser√° el punto de partida para el razonamiento jur√≠dico automatizado.")
clausula_usuario = st.text_area(
    "Cl√°usula contractual",
    height=200,
    placeholder="Ejemplo: El autor cede todos los derechos sobre la obra en todo el mundo, sin l√≠mite temporal..."
)

# M√≥dulo 2: Selecci√≥n de jurisdicci√≥n
st.header("üåç 2. Jurisdicci√≥n aplicable")
st.caption("Selecciona el marco legal en el que debe analizarse la cl√°usula.")
jurisdiccion = st.selectbox(
    "Jurisdicci√≥n principal",
    options=["Espa√±a", "EE.UU.", "Ambas"]
)

# M√≥dulo 3: Contexto legal (RAG simulado)
st.header("üìö 3. Normativa aplicada (RAG simulado)")
st.caption("Estos son los textos legales que la IA utilizar√° como base para el an√°lisis. Esto garantiza trazabilidad y evita 'alucinaciones'.")
contexto_legal = """
1. Espa√±a ‚Äì Art. 17 LPI:
‚ÄúCorresponde al autor el ejercicio exclusivo de los derechos de explotaci√≥n de su obra sin m√°s limitaciones que las establecidas por la ley.‚Äù

2. EE.UU. ‚Äì 17 U.S.C. ¬ß106:
‚ÄúEl titular del copyright tiene el derecho exclusivo de reproducir, preparar obras derivadas, distribuir copias y comunicar la obra p√∫blicamente.‚Äù

3. Convenio de Berna ‚Äì Art. 6bis:
‚ÄúEl autor conservar√° el derecho de reivindicar la paternidad de la obra y de oponerse a toda deformaci√≥n o modificaci√≥n de la misma.‚Äù
"""
st.code(contexto_legal, language="markdown")

# Bot√≥n para lanzar an√°lisis
st.markdown("---")
st.header("üöÄ 4. Iniciar an√°lisis deliberativo")
st.caption("El sistema analizar√° la cl√°usula, propondr√° mejoras y evaluar√° el equilibrio del razonamiento.")
analizar = st.button("Analizar cl√°usula con GPT-4")

# Proceso de an√°lisis
if analizar:

    prompt = f"""
Act√∫a como un asistente jur√≠dico deliberativo experto en propiedad intelectual internacional.

Tu tarea es analizar la siguiente cl√°usula legal desde una perspectiva comparativa, utilizando √∫nicamente los textos legales proporcionados m√°s abajo.

Descomp√≥n el an√°lisis en estos pasos:
1. Subpreguntas jur√≠dicas clave.
2. Validez de la cl√°usula en {jurisdiccion}.
3. Propuesta de cl√°usula alternativa, si fuera necesario.
4. Evaluaci√≥n del equilibrio epist√©mico (pluralidad, trazabilidad y justificaci√≥n).

{contexto_legal}

Cl√°usula a analizar:
\"\"\"
{clausula_usuario}
\"\"\"
"""

    with st.spinner("‚åõ Analizando la cl√°usula..."):

        try:
            response = client.chat.completions.create(
                model="gpt-4",
                messages=[{"role": "user", "content": prompt}],
                temperature=0.4
            )

            resultado = response.choices[0].message.content

            # Mostrar resultado paso a paso
            st.success("‚úÖ An√°lisis completo generado.")
            st.markdown("---")
            st.header("üß† 5. Resultado del an√°lisis jur√≠dico")

            # Subbloques extra√≠dos por cabeceras
            bloques = resultado.split("###")

            for bloque in bloques:
                if "Subpreguntas" in bloque:
                    with st.expander("üß© Subpreguntas jur√≠dicas"):
                        st.caption("La IA identifica las preguntas clave necesarias para evaluar jur√≠dicamente la cl√°usula.")
                        st.markdown(bloque)
                elif "Validez" in bloque:
                    with st.expander("üìê Validez jur√≠dica seg√∫n jurisdicci√≥n"):
                        st.caption("Comparaci√≥n legal seg√∫n la legislaci√≥n seleccionada.")
                        st.markdown(bloque)
                elif "alternativa" in bloque or "sugerida" in bloque:
                    with st.expander("‚úçÔ∏è Cl√°usula alternativa sugerida"):
                        st.caption("Una propuesta de redacci√≥n m√°s clara y jur√≠dicamente s√≥lida.")
                        st.markdown(bloque)
                elif "equilibrio" in bloque.lower():
                    with st.expander("‚öñÔ∏è Evaluaci√≥n epist√©mica del razonamiento"):
                        st.caption("Se valora la pluralidad, trazabilidad y justificaci√≥n del an√°lisis.")
                        st.markdown(bloque)
                else:
                    with st.expander("üìÑ Otros contenidos"):
                        st.markdown(bloque)

        except Exception as e:
            st.error(f"‚ùå Error al contactar con OpenAI: {str(e)}")
